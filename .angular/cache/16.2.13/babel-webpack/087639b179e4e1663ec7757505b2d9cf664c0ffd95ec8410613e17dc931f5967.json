{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let CourseListComponent = class CourseListComponent {\n  constructor(courseService, router) {\n    this.courseService = courseService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.getCourses();\n  }\n  getCourses() {\n    this.courseService.getCoursesList().subscribe(data => {\n      this.courses = data;\n    });\n  }\n  updateCourse(courseId) {\n    this.router.navigate(['update-course', courseId]);\n  }\n  deleteCourse(courseId) {\n    this.courseService.deleteCourse(courseId).subscribe(data => {\n      console.log(data);\n      this.getCourses();\n    });\n  }\n  getFileUrl(attachmentFileName) {\n    // Assuming your backend serves files from a specific route, construct the URL accordingly\n    return `http://localhost:8081/course/files/${attachmentFileName}`;\n  }\n  isTextFile(fileName) {\n    const textExtensions = ['.txt'];\n    const extension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();\n    return textExtensions.includes(extension);\n  }\n  isPdfFile(fileName) {\n    const pdfExtensions = ['.pdf'];\n    const extension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();\n    return pdfExtensions.includes(extension);\n  }\n  previewFile(attachmentFileName) {\n    window.open(this.getFileUrl(attachmentFileName), '_blank');\n  }\n};\nCourseListComponent = __decorate([Component({\n  selector: 'app-course-list',\n  templateUrl: './course-list.component.html',\n  styleUrls: ['./course-list.component.css']\n})], CourseListComponent);","map":{"version":3,"names":["Component","CourseListComponent","constructor","courseService","router","ngOnInit","getCourses","getCoursesList","subscribe","data","courses","updateCourse","courseId","navigate","deleteCourse","console","log","getFileUrl","attachmentFileName","isTextFile","fileName","textExtensions","extension","substring","lastIndexOf","toLowerCase","includes","isPdfFile","pdfExtensions","previewFile","window","open","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Administrator\\Desktop\\Angular\\angular-frontend\\src\\app\\course-list\\course-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Course } from '../course';\nimport { CourseService } from '../course.service';\n\n@Component({\n  selector: 'app-course-list',\n  templateUrl: './course-list.component.html',\n  styleUrls: ['./course-list.component.css']\n})\nexport class CourseListComponent implements OnInit{\n  courses!: Course[];\n\n  constructor(private courseService: CourseService,\n    private router: Router){}\n\n  ngOnInit(): void {\n    this.getCourses();\n  }\n\n  private getCourses(){\n    this.courseService.getCoursesList().subscribe(data => {\n      this.courses = data;\n    })\n  }\n\n  updateCourse(courseId: number){\n    this.router.navigate(['update-course',courseId]);\n  }\n\n  deleteCourse(courseId: number){\n    this.courseService.deleteCourse(courseId).subscribe( data => {\n      console.log(data);\n      this.getCourses();\n    })\n  }\n\n  getFileUrl(attachmentFileName: string): string {\n    // Assuming your backend serves files from a specific route, construct the URL accordingly\n    return `http://localhost:8081/course/files/${attachmentFileName}`;\n  }\n\n  isTextFile(fileName: string): boolean {\n    const textExtensions = ['.txt'];\n    const extension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();\n    return textExtensions.includes(extension);\n  }\n  \n  isPdfFile(fileName: string): boolean {\n    const pdfExtensions = ['.pdf'];\n    const extension = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();\n    return pdfExtensions.includes(extension);\n  }\n\n  previewFile(attachmentFileName: string): void {\n    window.open(this.getFileUrl(attachmentFileName), '_blank');\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAG9BC,YAAoBC,aAA4B,EACtCC,MAAc;IADJ,KAAAD,aAAa,GAAbA,aAAa;IACvB,KAAAC,MAAM,GAANA,MAAM;EAAU;EAE1BC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEQA,UAAUA,CAAA;IAChB,IAAI,CAACH,aAAa,CAACI,cAAc,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACnD,IAAI,CAACC,OAAO,GAAGD,IAAI;IACrB,CAAC,CAAC;EACJ;EAEAE,YAAYA,CAACC,QAAgB;IAC3B,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,eAAe,EAACD,QAAQ,CAAC,CAAC;EAClD;EAEAE,YAAYA,CAACF,QAAgB;IAC3B,IAAI,CAACT,aAAa,CAACW,YAAY,CAACF,QAAQ,CAAC,CAACJ,SAAS,CAAEC,IAAI,IAAG;MAC1DM,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;MACjB,IAAI,CAACH,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAW,UAAUA,CAACC,kBAA0B;IACnC;IACA,OAAO,sCAAsCA,kBAAkB,EAAE;EACnE;EAEAC,UAAUA,CAACC,QAAgB;IACzB,MAAMC,cAAc,GAAG,CAAC,MAAM,CAAC;IAC/B,MAAMC,SAAS,GAAGF,QAAQ,CAACG,SAAS,CAACH,QAAQ,CAACI,WAAW,CAAC,GAAG,CAAC,CAAC,CAACC,WAAW,EAAE;IAC7E,OAAOJ,cAAc,CAACK,QAAQ,CAACJ,SAAS,CAAC;EAC3C;EAEAK,SAASA,CAACP,QAAgB;IACxB,MAAMQ,aAAa,GAAG,CAAC,MAAM,CAAC;IAC9B,MAAMN,SAAS,GAAGF,QAAQ,CAACG,SAAS,CAACH,QAAQ,CAACI,WAAW,CAAC,GAAG,CAAC,CAAC,CAACC,WAAW,EAAE;IAC7E,OAAOG,aAAa,CAACF,QAAQ,CAACJ,SAAS,CAAC;EAC1C;EAEAO,WAAWA,CAACX,kBAA0B;IACpCY,MAAM,CAACC,IAAI,CAAC,IAAI,CAACd,UAAU,CAACC,kBAAkB,CAAC,EAAE,QAAQ,CAAC;EAC5D;CAED;AAhDYjB,mBAAmB,GAAA+B,UAAA,EAL/BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWlC,mBAAmB,CAgD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}